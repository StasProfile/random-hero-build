const TelegramBot = require('node-telegram-bot-api');
const config = require('../../config');
const logger = require('../../utils/logger');

/**
 * Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–±–æ—Ä–æ–∫ Dota 2
 */
class DotaRandomBuildBot {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
     * @param {import('../../application/services/RandomBuildService')} randomBuildService - –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–±–æ—Ä–æ–∫
     */
    constructor(randomBuildService) {
        this.randomBuildService = randomBuildService;
        /** @type {import('node-telegram-bot-api')} */
        this.bot = new TelegramBot(config.telegram.token, { polling: true });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
     */
    start() {
        this.#setupCommandHandlers();
        logger.info('Telegram bot started');
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
     * @private
     */
    #setupCommandHandlers() {
        this.bot.onText(/\/start/, this.#handleStart.bind(this));
        this.bot.onText(/\/build/, this.#handleBuild.bind(this));
        this.bot.onText(/\/help/, this.#handleHelp.bind(this));
        
        this.bot.on('error', (error) => {
            logger.error('Telegram bot error:', error);
        });
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
     * @param {import('node-telegram-bot-api').Message} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    async #handleStart(msg) {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId, 
            '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É –¥–ª—è Dota 2.\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π /build —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏.'
        );
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
     * @param {import('node-telegram-bot-api').Message} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    async #handleHelp(msg) {
        const chatId = msg.chat.id;
        await this.bot.sendMessage(chatId,
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/build - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–±–æ—Ä–∫—É\n' +
            '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        );
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /build
     * @param {import('node-telegram-bot-api').Message} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @private
     */
    async #handleBuild(msg) {
        const chatId = msg.chat.id;
        try {
            const build = await this.randomBuildService.getRandomBuild();
            await this.bot.sendMessage(chatId, this.#formatBuildMessage(build));
        } catch (error) {
            logger.error('Error generating build:', error);
            await this.bot.sendMessage(chatId, 
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–±–æ—Ä–∫–æ–π
     * @param {import('../../application/services/RandomBuildService').RandomBuild} build - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @private
     */
    #formatBuildMessage(build) {
        const heroesSection = this.#formatHeroesSection(build.heroes);
        const itemsSection = this.#formatItemsSection(build.items);
        
        return `${heroesSection}\n\n${itemsSection}`;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –≥–µ—Ä–æ—è–º–∏
     * @param {import('../../application/services/RandomBuildService').HeroInfo[]} heroes - –°–ø–∏—Å–æ–∫ –≥–µ—Ä–æ–µ–≤
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –≥–µ—Ä–æ–µ–≤
     * @private
     */
    #formatHeroesSection(heroes) {
        const heroList = heroes
            .map(hero => hero.name)
            .join('\n');
        
        return `ü¶∏ –ì–µ—Ä–æ–∏:\n${heroList}`;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
     * @param {import('../../application/services/RandomBuildService').ItemInfo[]} items - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
     * @private
     */
    #formatItemsSection(items) {
        const itemList = items
            .map((item, index) => `${index + 1}. ${item.name} (${item.cost} –∑–æ–ª–æ—Ç–∞)`)
            .join('\n');
        
        return `üõç –ü—Ä–µ–¥–º–µ—Ç—ã:\n${itemList}`;
    }
}

module.exports = DotaRandomBuildBot; 